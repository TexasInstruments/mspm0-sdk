%%{
    /* Licensing & Includes */
%%}
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Ha Thach (tinyusb.org)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#ifndef USB_DESCRIPTORS_H_
#define USB_DESCRIPTORS_H_

%%{
    /* Get Common utility functions */
    let Common = system.getScript("/ti/driverlib/Common.js");
    let tusbCommon = system.getScript("/ti/tinyusb_meta/Common.js");
    let inst = system.modules["/ti/tinyusb_meta/tinyusb"].$static;
    let associatedUSB = inst.associated_USB;
%%}
%%{
    // Helper Defines
    // define associated instance arrays to determine length
    let hidInsts    = tusbCommon.getHIDInstances(inst);
%%}
%%{
    // HID Report Defines
%%}
%    // Device Configuration
%    if(inst.mode == "device"){
%        // Iterate through Device HID instances
%        for(var myClass of inst.associated_devHID){
%%{
    // Define changes based on how many modes enabled
    let modesEnabled = 0;
    if(myClass.enableKeyboard) modesEnabled++;
    if(myClass.enableMouse) modesEnabled++;
    if(myClass.enableConsumer) modesEnabled++;
    if(myClass.enableGamepad) modesEnabled++;
    if(myClass.enableGenericInOut) modesEnabled++;
    let defineFlavor = (hidInsts.length>1)?("_"+myClass.$name):""
%%}
%           if(myClass.enableKeyboard){
`("#define REPORT_ID"+defineFlavor+"_KEYBOARD").padEnd(40, " ") + ("0x"+(myClass.keyboardID).toString(16)).padStart(10, " ")`
%           }
%           if(myClass.enableMouse){
`("#define REPORT_ID"+defineFlavor+"_MOUSE").padEnd(40, " ") + ("0x"+(myClass.mouseID).toString(16)).padStart(10, " ")`
%           }
%           if(myClass.enableConsumer){
`("#define REPORT_ID"+defineFlavor+"_CONSUMER_CONTROL").padEnd(40, " ") + ("0x"+(myClass.consumerID).toString(16)).padStart(10, " ")`
%           }
%           if(myClass.enableGamepad){
`("#define REPORT_ID"+defineFlavor+"_GAMEPAD").padEnd(40, " ") + ("0x"+(myClass.gamepadID).toString(16)).padStart(10, " ")`
%           }
%           if(myClass.enableGenericInOut){
`("#define REPORT_ID"+defineFlavor+"_GENERIC_INOUT").padEnd(40, " ") + ("0x"+(myClass.genericInOutID).toString(16)).padStart(10, " ")`
%           }
%           if(hidInsts.length > 0){
`("#define REPORT_ID"+defineFlavor+"_COUNT").padEnd(40, " ") + (modesEnabled).toString().padStart(10, " ")`
%           }
%        }
%%{
    // Billboard Configuration
%%}
%       for(var myClass of inst.associated_devBillboard){
%           let itemIndex = 0;
% // emum definition
enum {
%           for(var aumMod of myClass.associated_devBillboardAUM){
    `aumMod.$name+((itemIndex==0)?" = 0,":",")`
%               itemIndex++;
%           }
    TOTAL_AUM_COUNT,
};

extern uint8_t descriptorState;

/* Number of Billboard AUM capability descriptors that will be supported */
#define BILLBOARD_AUM_COUNT (`myClass.associated_devBillboardAUM.length`)

/*
 * Number of separate device capability descriptors in BOS callback, includes Capability and Container ID.
 * Billboard capability + Container ID + # of AUM
 */
#define TUD_TOTAL_CAP_COUNT (2 + BILLBOARD_AUM_COUNT)

/* Total length of all Billboard AUM Capability descriptors */
#define BOS_TOTAL_LEN      (TUD_BOS_DESC_LEN + TUD_BILLBOARD_CONTAINER_ID_LEN +\
                           (TUD_BILLBOARD_CAPABILITY_DESCRIPTOR_BASE_LEN + (BILLBOARD_AUM_COUNT * 4)) +\
                           (BILLBOARD_AUM_COUNT * TUD_BILLBOARD_AUM_CAPABILITY_LEN))

% // UUID definition
#define TUD_BOS_CONTAINER_EXAMPLE_UUID \
        /* Data1 */\
        0x`(myClass.UUID_1).toString(16).toUpperCase()`, 0x`(myClass.UUID_2).toString(16).toUpperCase()`, 0x`(myClass.UUID_3).toString(16).toUpperCase()`, 0x`(myClass.UUID_4).toString(16).toUpperCase()`, \
        /* Data2 */\
        0x`(myClass.UUID_5).toString(16).toUpperCase()`, 0x`(myClass.UUID_6).toString(16).toUpperCase()`, \
        /* Data3 */\
        0x`(myClass.UUID_7).toString(16).toUpperCase()`, 0x`(myClass.UUID_8).toString(16).toUpperCase()`, \
        /* Data4 */\
        0x`(myClass.UUID_9).toString(16).toUpperCase()`, 0x`(myClass.UUID_10).toString(16).toUpperCase()`, 0x`(myClass.UUID_11).toString(16).toUpperCase()`, 0x`(myClass.UUID_12).toString(16).toUpperCase()`, 0x`(myClass.UUID_13).toString(16).toUpperCase()`, 0x`(myClass.UUID_14).toString(16).toUpperCase()`, 0x`(myClass.UUID_15).toString(16).toUpperCase()`, 0x`(myClass.UUID_16).toString(16).toUpperCase()`

%%{
    // Billboard Descriptor definition (static)
%%}
typedef struct TU_ATTR_PACKED {
    /* BOS descriptor struct length 5 bytes */
    struct TU_ATTR_PACKED {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint16_t wTotalLength;
        uint8_t bNumDeviceCaps;
    } BOS;

    /* Container ID struct length 20 bytes */
    struct TU_ATTR_PACKED {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bReserved;
        uint8_t UUID[16];
    } containerID;

    /* Capability Descriptor struct length 44 bytes + (4 * BILLBOARD_AUM_COUNT) */
    struct TU_ATTR_PACKED {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t iAdditionalInfoURL;
        uint8_t bNumberOfAlternateOrUSB4Modes;
        uint8_t bPreferredAlternateOrUSB4Mode;
        uint16_t VCONNPower;
        uint8_t bmConfigured[32];
        uint16_t bcdVersion;
        uint8_t bAdditionalFailureInfo;
        uint8_t bReserved;
        struct TU_ATTR_PACKED {
            uint16_t wSVID;
            uint8_t bAlternateOrUSB4Mode;
            uint8_t iAlternateOrUSB4ModeString;
        } aum[BILLBOARD_AUM_COUNT];
    } billboardCapability;
    /*
     * This value will grow depending on user requirement, i.e if they have another instance of
     * AUM then they must add another wSVID/bAlt/iAlt instance into the capability struct
     */

    /* AUM Capability Descriptor struct length 8 bytes */
    struct TU_ATTR_PACKED {
        uint8_t bLength;
        uint8_t bDescriptorType;
        uint8_t bDevCapabilityType;
        uint8_t bIndex;
        uint32_t dwAlternateModeVdo;
    } billboardAumCapability[BILLBOARD_AUM_COUNT];
} bos_desc_t;

/* Extern the struct so we can use it main.c */
extern bos_desc_t BOS_desc;
%       } // iterate through Billboard instances
%    }
#endif /* USB_DESCRIPTORS_H_ */
