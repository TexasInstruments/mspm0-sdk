%%{
/*
 * Copyright (c) 2018-2019, Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== RTC_A.Board.c.xdt ========
 */
    /* args[] passed by /ti/drivers/templates/Board.c.xdt during function call: */
    let RTC_A = args[0];
    let content = args[1];
    let Common = system.getScript("/ti/driverlib/Common.js");
    let RTC_CodeGen_Common = system.getScript("/ti/driverlib/RTC_CodeGen.common.js");

    /* shorthand names for some common references in template below */
    let stat = RTC_A.$static;
    if (stat.length == 0) return;

    /*
     * Standard Trampoline:
     * In order to preserve spacing, it is important to also set the boolean
     * values in the templates object based on whether that condition should
     * produce any code
     * Example:
     * templates: {
     *       boardc: "/ti/driverlib/comp/COMP.Board.c.xdt",
     *       boardh: "/ti/driverlib/comp/COMP.Board.h.xdt",
     *       Call: true,
     *       Reset: false,
     *       Power: true,
     *       GPIO: false,
     *       Function: true
     * },
     */

    switch(content) {
        case "Call":
            printCall();
            break;
        case "Reset":
            printReset();
            break;
        case "Power":
            printPower();
            break;
        case "GPIO":
            printGPIO();
            break;
        case "Function":
            printFunction();
            break;
        default:
            /* do nothing */
            break;
    }
%%}
%
% function printCall() {
    SYSCFG_DL_RTC_A_init();
% }
%
% function printReset() {
%
% }
%
% function printPower() {
% }
%
% function printGPIO() {
% if(stat.enableRTCOutputPin) {
    /* Configure RTC_A OUT pin */
    DL_GPIO_initPeripheralOutputFunction(
        GPIO_RTC_A_IOMUX_RTCOUT, GPIO_RTC_A_IOMUX_RTCOUT_FUNC);
% }
% }
%
% /* Main Function */
% function printFunction() {
%    let calendarString = RTC_CodeGen_Common.getRTCCalenderC(stat, "RTC_A");
`calendarString`
%    let alarm1String = RTC_CodeGen_Common.getRTCCalenderAlarm1(stat, "RTC_A");
% if(stat.enCalAlarm1) {

`alarm1String`
%}
%    let alarm2String = RTC_CodeGen_Common.getRTCCalenderAlarm2(stat, "RTC_A");
% if(stat.enCalAlarm2) {

`alarm2String`
%}

SYSCONFIG_WEAK void SYSCFG_DL_RTC_A_init(void)
{
%    let rtcInitString = RTC_CodeGen_Common.getRTCSyscfgInit(stat, "RTC_A");
`rtcInitString`
% if(stat.enableWriteProtect) {
    DL_RTC_A_enableWriteProtect(RTC_A);
% }
}
%}
