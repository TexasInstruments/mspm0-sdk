%%{
/*
 * Copyright (c) 2025 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== TIMERB.Board.h.xdt ========
 */

    let TIMERB = args[0]; /* passed by /ti/driverlib/templates/Board.c.xdt */
    let content = args[1];

    let Common = system.getScript("/ti/driverlib/Common.js");

    let instances = TIMERB.$instances;

    switch(content) {
        case "Define":
            printDefine();
            break;
        case "Declare":
            printDeclare();
            break;
        default:
            /* do nothing */
            return;
    }
%%}

% function printDefine() {
%   for (let i in instances) {
%       let flavor = instances[i].peripheral.$solution.peripheralName;
%		let nameStr = "#define "+instances[i].$name+"_INST";
`nameStr.padEnd(40," ")+flavor.padStart(40," ")`
%		let counter_mod = system.modules["/ti/driverlib/timerb/TIMERBCounter"];
%		if(!counter_mod) return;
%		let counters = counter_mod.$instances;
%		counters = counters.filter(counter => counter.$ownedBy.$name == instances[i].$name);
%		for(let j in counters) {
%			let counterIdxStr = "#define "+instances[i].$name+"_INST_"+counters[j].$name+"_INDEX";
%			let idx = "" + counters[j].index;
`counterIdxStr.padEnd(40," ")+idx.padStart(40," ")`
%		}
%       /* Create defines for event publisher channels */
%       if ((instances[i].event1PublisherChannel != 0) &&
%           (instances[i].event1ControllerInterruptEn.length > 0)) {
%               let eventPub0ChannelStr = "#define " + instances[i].$name + "_INST_PUB_0_CH";
%               let eventPub0ChannelStr2 = "(" + instances[i].event1PublisherChannel + ")";
`eventPub0ChannelStr.padEnd(40, " ") + eventPub0ChannelStr2.padStart(40, " ")`
%       }
%
%       /* Create defines for event subscriber channels */
%       if ((instances[i].subscriberPort) && (instances[i].subscriberChannel != 0)) {
%           let eventSubChannelStr = "#define " + instances[i].$name + "_INST_SUB_CH";
%           let eventSubChannelStr2 = "(" + instances[i].subscriberChannel + ")";
`eventSubChannelStr.padEnd(40, " ") + eventSubChannelStr2.padStart(40, " ")`
%       }
% }
%
% } // printDefine
%
% function printDeclare() {
%   for (let i in instances) {
%       let inst = instances[i];
%       let name = inst.$name
void SYSCFG_DL_`name`_init(void);
%   }
% } // print declare
